{"version":3,"sources":["component/DragAndDropItems.js","component/DragandDrop2.js","App.js","serviceWorker.js","index.js"],"names":["DragAndDropItems","event","dataTransfer","setData","target","id","console","log","_this","this","props","name","bgColor","react_default","a","createElement","onDragStart","onDragEnter","draggable","className","style","backgroundColor","key","Component","DragandDrop2","preventDefault","getData","id2","appendChild","document","getElementById","clearData","items","onDrop","onDragOver","component_DragAndDropItems","App","state","first","second","third","_this$state","component_DragandDrop2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.222d237c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './DragandDrop.css';\n\nclass DragAndDropItems extends Component{\n  onDragStart(event){\n    event.dataTransfer.setData('id', event.target.id);\n    console.log(event.target.id);\n  }\n\n  onDragEnter(event ,id){\n    event.dataTransfer.setData('id2', id);\n    console.log('id2: ', id);\n  }\n\n  render(){\n\n    const id = this.props.id;\n    const name = this.props.name;\n    const bgColor = this.props.bgColor;\n\n\n    return(\n      <div\n        onDragStart={(event) => this.onDragStart(event)}\n        onDragEnter={(event) => this.onDragEnter(event, id)}\n        \n        draggable\n\n        className={'draggable '}\n        style={{backgroundColor: bgColor}}\n        id={id}\n        key={id}\n      >\n        {name}\n      </div>\n    )\n  }\n\n}\n\nexport default DragAndDropItems;","import React, {Component} from 'react';\nimport './DragandDrop.css'\n\nimport Items from './DragAndDropItems';\n\nclass DragandDrop2 extends Component{\n\n  onDragOver(event){\n    event.preventDefault();\n  }\n\n  onDrop(event){\n    let id = event.dataTransfer.getData('id');\n    let id2 = event.dataTransfer.getData('id2');\n    \n    console.log('id: ',id);\n    if(id !== id2){\n      event.target.appendChild(document.getElementById(id));\n    }else{\n      event.dataTransfer.clearData('id2');\n      event.dataTransfer.clearData('id')\n    }\n    \n    event.dataTransfer.clearData('id');\n  }\n\n  onDragEnter(event){\n    let id = event.dataTransfer.getData('id');\n    let id2 = event.dataTransfer.getData('id2');\n\n    if(id !== id2){\n      console.log('not same');\n    }else{\n      console.log('same');\n    }\n  }\n\n\n  render(){\n    const items = this.props.items;\n\n    return(\n      <div\n        onDrop={(event) => this.onDrop(event)}\n        onDragOver={(event) => this.onDragOver(event)}\n        onDragEnter={(event) => this.onDragEnter(event)}\n\n        id={items.id}\n        className='firstContainer'\n      >\n        <Items id={items.id} name={items.name} bgColor={items.bgColor} />\n      </div>\n    )\n  }\n}\n\nexport default DragandDrop2;","import React, { Component } from 'react';\n\nimport './App.css';\n\n// import Drag from './component/DragandDrop2';\n\nimport DragContainer from './component/DragandDrop2';\n// import DragItems from './component/DragAndDropItems';\n\nclass App extends Component {\n  state={\n    first: {\n      name: 'Hello World',\n      id: 'first',\n      bgColor: 'BLUE',\n    },\n    second:{\n      name: 'Good bye World',\n      id: 'second',\n      bgColor: 'ORANGE',\n    },\n    third:{\n      name: 'Third',\n      id: 'third',\n      bgColor: 'YELLOW',\n    }\n  }\n  render() {\n    const {first, second, third} = this.state;\n\n    return (\n      <div className=\"App \">\n        <p className='Header'>\n          Drag And Drop (?)\n        </p>\n        <div className='containerDrag'>\n          <table>\n            <tbody>\n              <tr>\n                <td> \n                  <DragContainer items={first}/>\n                </td>\n                <td> \n                  <DragContainer items={second} />\n                </td>\n              </tr>\n              <tr>\n                <td></td>\n                <td>  \n                  <DragContainer items={third} />\n                </td>\n              </tr>\n            </tbody>\n            \n          </table>\n         \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}