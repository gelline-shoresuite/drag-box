{"version":3,"sources":["App2.js","serviceWorker.js","index.js"],"names":["Item","_ref","color","id","text","name","onDragStartHandler","react_default","a","createElement","className","style","backgroundColor","draggable","onDragStart","key","getItems","basketItems","items","map","basketItem","filter","item","Basket","_ref2","onDropHandler","onDragOverHandler","onClickHandler","onDrop","onDragOver","index","App2_Item","Object","assign","App","state","baskets","handleOnDragStart","event","firstId","target","console","log","dataTransfer","setData","handleOnDrop","i","getData","_this","basket","concat","setState","handleOnDragOver","preventDefault","_this2","this","_this$state","App2_Basket","listkey","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App2","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44cb5cf2.chunk.js","sourcesContent":["import React from 'react';\nimport './App2.css'\n\n//Don't remove any old codes? but I can add more.\n\nconst Item = ({ color, id, text, name, onDragStartHandler}) => (\n  <section className=\"item\" style={{\n      backgroundColor: color,\n    }}\n    \n    draggable\n\n    onDragStart={onDragStartHandler}\n\n\n    key={id}\n    id={name}\n    >\n    <span>{text}</span>\n  </section>\n);\n\nconst getItems = (basketItems, items) => basketItems.map(basketItem =>\n  items.filter(item => basketItem === item.name)[0]                                  \n)\n\nconst Basket = ({name, items , onDropHandler, onDragOverHandler, onDragStartHandler, onClickHandler})  => (\n  <article className=\"basket\"\n    key={name}\n\n    onDrop={onDropHandler}\n    onDragOver={onDragOverHandler}\n    >\n    {items.map((item, index) => (\n      <Item \n        {...item}\n        onDragStartHandler={onDragStartHandler}\n        onClickHandler={onClickHandler}\n        key={'item' + index}\n        />\n      ))}\n  </article>\n);\n\nclass App extends React.Component {\n\n  state = {\n    baskets: [\n      {\n        name: \"basket1\",\n        items: [\n          \"indigo\",\n          \"red\",\n        ]\n      },\n      {\n        name: \"basket2\",\n        items: [\n          \"deeporange\",\n        ]\n      },\n      {\n        name: \"basket3\",\n        items: [\n          \"cyan\",\"blue\"\n        ]\n      },\n    ],\n    items: [\n      {\n        name: \"indigo\",\n        color: \"#3f51b5\",\n        text: \"Indigo\"\n      },\n      {\n        name: \"deeporange\",\n        color: \"#ff5722\",\n        text: \"Deep Orange\"\n      },\n      {\n        name: \"red\",\n        color: \"#f44336\",\n        text: \"Red\"\n      },\n      {\n        name: \"cyan\",\n        color: \"#00bcd4\",\n        text: \"Cyan\"\n      },\n      {\n        name: \"blue\",\n        color: \"blue\",\n        text: \"Blue\"\n      },\n    ],\n\n\n  }\n\n  handleOnDragStart = (event, firstId) =>{\n    const id = event.target.id;\n\n    console.log('Drag: ', id);\n    console.log('First ID: ' , firstId);\n\n    event.dataTransfer.setData('id', id);\n    event.dataTransfer.setData('firstId', firstId);\n  }\n\n  handleOnDrop = (event, i) =>{\n    const id = event.dataTransfer.getData('id');\n    const firstId = event.dataTransfer.getData('firstId');\n\n    if(firstId != i){\n\n      const baskets = this.state.baskets.map((basket, index) =>{\n        console.log('Initial basket ' + index, basket.items);\n        if(index == firstId){\n          basket.items =  basket.items.filter((item)=>{\n            return(item !== id);\n          })\n        }\n        if(index === i){\n          basket.items = basket.items.concat(id);\n        }\n       \n        return basket;\n      })\n\n      console.log(baskets)\n\n      this.setState({\n        baskets: baskets\n      })\n\n    }else{\n      console.log('No')\n    }\n\n    \n  }\n\n  handleOnDragOver = (event) =>{\n    event.preventDefault();\n  }\n\n\n  render() {\n    const {\n      baskets,\n      items,\n    } = this.state;\n\n    return ( \n      <div className=\"app\">\n        <div className=\"basket-container\">\n          {baskets.map((basket, index) => (\n            <Basket\n              items={getItems(basket.items, items)}\n              listkey={basket.name}\n\n              onDragStartHandler={(event) => this.handleOnDragStart(event, index)}\n              onDropHandler={(event) => this.handleOnDrop(event, index)}\n              onDragOverHandler={this.handleOnDragOver}\n\n              key={index}\n              />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App2';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}